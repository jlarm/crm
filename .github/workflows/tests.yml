name: Tests

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: true
      matrix:
        php: [8.4]

    name: PHP ${{ matrix.php }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, pdo_mysql, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Composer packages
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Install NPM dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Copy environment file
        run: cp .env.example .env

      - name: Configure database and services
        run: |
          sed -i '/^DB_CONNECTION=sqlite/d' .env
          echo "" >> .env
          echo "# Testing Environment Configuration" >> .env
          echo "APP_ENV=testing" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "" >> .env
          echo "# Database Configuration for Testing" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=testing" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=password" >> .env
          echo "" >> .env
          echo "# Service Configuration for Testing" >> .env
          echo "MAILCOACH_API_TOKEN=test_token" >> .env
          echo "MAILCOACH_API_ENDPOINT=https://test.mailcoach.app/api" >> .env
          echo "SENTRY_DSN=" >> .env
          echo "LOG_CHANNEL=stack" >> .env
          echo "MAIL_MAILER=log" >> .env

      - name: Generate app key
        run: php artisan key:generate --ansi

      - name: Display Laravel environment
        run: |
          echo "=== Environment Check ==="
          php -v
          echo "=== Laravel Configuration ==="
          php artisan env
          echo "=== Database Configuration ==="
          php artisan config:show database

      - name: Wait for MySQL
        run: |
          echo "=== Waiting for MySQL ==="
          while ! mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"password" --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL is ready!"

      - name: Cache Laravel configuration
        run: |
          echo "=== Caching Configuration ==="
          php artisan config:cache
          php artisan route:clear
          php artisan view:clear

      - name: Set up database
        run: |
          echo "=== Running Migrations ==="
          php artisan migrate --force --seed --verbose

      - name: Run Laravel Pint (Code Style)
        run: |
          echo "=== Running Laravel Pint ==="
          vendor/bin/pint --test

      - name: Verify test setup
        run: |
          echo "=== Verifying Test Environment ==="
          php artisan config:show database
          php artisan migrate:status
          echo "=== Available Tests ==="
          php artisan test --list-tests

      - name: Execute tests
        run: |
          echo "=== Running Tests ==="
          php artisan test --parallel --verbose

      - name: Upload coverage reports (if available)
        if: matrix.php == '8.4'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false